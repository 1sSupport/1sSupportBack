//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace WebApi.EF.Design
{
   /// <inheritdoc/>
   public partial class EFContext : Microsoft.EntityFrameworkCore.DbContext
   {
      #region DbSets
      public Microsoft.EntityFrameworkCore.DbSet<WebApi.EF.Design.Article> Article { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<WebApi.EF.Design.ArticleDependencies> ArticleDependencies { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<WebApi.EF.Design.ArticleTag> ArticleTag { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<WebApi.EF.Design.Configuration1C> Configuration1C { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<WebApi.EF.Design.OpenedArticle> OpenedArticle { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<WebApi.EF.Design.Provider> Provider { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<WebApi.EF.Design.SearchingQuery> SearchingQuery { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<WebApi.EF.Design.Session> Session { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<WebApi.EF.Design.Tag> Tag { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<WebApi.EF.Design.User> User { get; set; }
      #endregion DbSets

      /// <inheritdoc />
      public EFContext() : base()
      {
      }

      /// <inheritdoc />
      public EFContext(DbContextOptions<EFContext> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<WebApi.EF.Design.Article>()
                     .ToTable("Article")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<WebApi.EF.Design.Article>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<WebApi.EF.Design.Article>()
                     .Property(t => t.Title)
                     .IsRequired();
         modelBuilder.Entity<WebApi.EF.Design.Article>()
                     .Property(t => t.Text)
                     .IsRequired();
         modelBuilder.Entity<WebApi.EF.Design.Article>()
                     .HasOne(x => x.ParentArticle)
                     .WithOne()
                     .IsRequired();
         modelBuilder.Entity<WebApi.EF.Design.Article>()
                     .HasOne(x => x.ArticleDependencies)
                     .WithMany(x => x.Article);

         modelBuilder.Entity<WebApi.EF.Design.ArticleDependencies>()
                     .ToTable("ArticleDependencies")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<WebApi.EF.Design.ArticleDependencies>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<WebApi.EF.Design.ArticleDependencies>()
                     .HasOne(x => x.Configuration1C)
                     .WithMany(x => x.ArticleDependencies);

         modelBuilder.Entity<WebApi.EF.Design.ArticleTag>()
                     .ToTable("ArticleTag")
                     .HasKey(t => t.ID);
         modelBuilder.Entity<WebApi.EF.Design.ArticleTag>()
                     .Property(t => t.ID)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<WebApi.EF.Design.ArticleTag>()
                     .HasOne(x => x.Article)
                     .WithMany(x => x.ArticleTag);
         modelBuilder.Entity<WebApi.EF.Design.ArticleTag>()
                     .HasOne(x => x.Tag)
                     .WithMany(x => x.ArticleTag);

         modelBuilder.Entity<WebApi.EF.Design.Configuration1C>()
                     .ToTable("Configuration1C")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<WebApi.EF.Design.Configuration1C>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();

         modelBuilder.Entity<WebApi.EF.Design.OpenedArticle>()
                     .ToTable("OpenedArticle")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<WebApi.EF.Design.OpenedArticle>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<WebApi.EF.Design.OpenedArticle>()
                     .HasOne(x => x.Article)
                     .WithMany(x => x.OpenedArticle);
         modelBuilder.Entity<WebApi.EF.Design.OpenedArticle>()
                     .HasOne(x => x.SearchingQuery)
                     .WithMany(x => x.OpenedArticle);

         modelBuilder.Entity<WebApi.EF.Design.Provider>()
                     .ToTable("Provider")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<WebApi.EF.Design.Provider>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();

         modelBuilder.Entity<WebApi.EF.Design.SearchingQuery>()
                     .ToTable("SearchingQuery")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<WebApi.EF.Design.SearchingQuery>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<WebApi.EF.Design.SearchingQuery>()
                     .HasOne(x => x.Session)
                     .WithMany(x => x.SearchingQuery);

         modelBuilder.Entity<WebApi.EF.Design.Session>()
                     .ToTable("Session")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<WebApi.EF.Design.Session>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<WebApi.EF.Design.Session>()
                     .HasOne(x => x.User)
                     .WithMany(x => x.Session);

         modelBuilder.Entity<WebApi.EF.Design.Tag>()
                     .ToTable("Tag")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<WebApi.EF.Design.Tag>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<WebApi.EF.Design.Tag>()
                     .Property(t => t.Value)
                     .IsRequired();

         modelBuilder.Entity<WebApi.EF.Design.User>()
                     .ToTable("User")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<WebApi.EF.Design.User>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<WebApi.EF.Design.User>()
                     .HasOne(x => x.Provider)
                     .WithMany(x => x.User);

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
